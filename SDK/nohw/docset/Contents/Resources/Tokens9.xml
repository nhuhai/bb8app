<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHCardReaderManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHCardReaderManager</TokenIdentifier>
			<Abstract type="html">The card reader manager handles all interaction with card and chip&amp;amp;pin hardware devices.
This includes audio readers, dock port readers, and Bluetooth readers.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
            
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginMonitoring</TokenIdentifier>
			<Abstract type="html">Monitor for all known device types</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)beginMonitoring</Declaration>
			
			
			<Anchor>//api/name/beginMonitoring</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginMonitoring:</TokenIdentifier>
			<Abstract type="html">Begin monitoring the device for connection and removal of the specified reader types.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)beginMonitoring:(PPHReaderTypeMask)readerTypes</Declaration>
			<Parameters>
				<Parameter>
					<Name>readerTypes</Name>
					<Abstract type="html">the types of readers to watch for</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginMonitoring:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/setMonitoringForTypes:</TokenIdentifier>
			<Abstract type="html">The types we are currently monitoring for.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) PPHReaderTypeMask monitoringForTypes</Declaration>
			
			
			<Anchor>//api/name/monitoringForTypes</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/monitoringForTypes</TokenIdentifier>
			<Abstract type="html">The types we are currently monitoring for.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) PPHReaderTypeMask monitoringForTypes</Declaration>
			
			
			<Anchor>//api/name/monitoringForTypes</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHCardReaderManager/monitoringForTypes</TokenIdentifier>
			<Abstract type="html">The types we are currently monitoring for.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) PPHReaderTypeMask monitoringForTypes</Declaration>
			
			
			<Anchor>//api/name/monitoringForTypes</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/endMonitoring</TokenIdentifier>
			<Abstract type="html">Stop reacting to events around device connection and removal.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)endMonitoring</Declaration>
			
			
			<Anchor>//api/name/endMonitoring</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/activateReader:</TokenIdentifier>
			<Abstract type="html">Mark the given reader as the active reader for transactions. Anytime there is only a single reader available
it will automatically become the active reader. Sending nil as the reader will deactivate the current active
reader.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHReaderError)activateReader:(PPHCardReaderMetadata *)reader</Declaration>
			
			
			<Anchor>//api/name/activateReader:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/openActiveReader</TokenIdentifier>
			<Abstract type="html">Begins listening for card data on the active reader. If the reader is not yet fully connected it will
automatically open when it&apos;s connection completes successfully. Has no effect if the reader is already
in an open state.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)openActiveReader</Declaration>
			
			<ReturnValue><Abstract type="html">wether or not the reader was opened or marked to be opened</Abstract></ReturnValue>
			<Anchor>//api/name/openActiveReader</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/closeActiveReader</TokenIdentifier>
			<Abstract type="html">Stops listening for card data on the active reader. Has no effect if the reader is not open.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)closeActiveReader</Declaration>
			
			<ReturnValue><Abstract type="html">wether or not the reader was closed</Abstract></ReturnValue>
			<Anchor>//api/name/closeActiveReader</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/availableReaders</TokenIdentifier>
			<Abstract type="html">An array of known available devices. For example with bluetooth devices this will include
paired devices that are currently within range/connectable.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)availableReaders</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray(PPHCardReaderMetadata</Abstract></ReturnValue>
			<Anchor>//api/name/availableReaders</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/availableReaderOfType:</TokenIdentifier>
			<Abstract type="html">Get the currently available reader of a given type. A reader is considered available if we have a potential
connection opportunity (e.g. something is inserted in the audio jack, or a bluetooth device with a matching
protocol is in range)</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHCardReaderMetadata *)availableReaderOfType:(PPHReaderType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">the type of reader to get</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/availableReaderOfType:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/lastAvailableReaderOfType:</TokenIdentifier>
			<Abstract type="html">The most recently available reader of a given type. If the reader type is currently available
then you will get the same return value as calling availableReaderOfType</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHCardReaderMetadata *)lastAvailableReaderOfType:(PPHReaderType)type</Declaration>
			<Parameters>
				<Parameter>
					<Name>type</Name>
					<Abstract type="html">the type of reader to get</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/lastAvailableReaderOfType:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/activeReader</TokenIdentifier>
			<Abstract type="html">Get the reader that is currently being used for transactions. If there is a single available reader then
it will automatically be marked as active. If there are multiple available readers you must call
activateReader to select one before transacting.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (PPHCardReaderMetadata *)activeReader</Declaration>
			
			
			<Anchor>//api/name/activeReader</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHCardReaderManager/beginUpgradeUsingSDKUIForReader:completionHandler:</TokenIdentifier>
			<Abstract type="html">Begin the flow that updates the reader.</Abstract>
			<DeclaredIn>PPHCardReaderManager.h</DeclaredIn>
			
			<Declaration>- (void)beginUpgradeUsingSDKUIForReader:(PPHCardReaderMetadata *)reader completionHandler:(void ( ^ ) ( BOOL success , NSString *message ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>reader</Name>
					<Abstract type="html">The reader to begin upgrading</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">called when the action has completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginUpgradeUsingSDKUIForReader:completionHandler:</Anchor>
            <NodeRef refid="9"/>
		</Token>
		
        
        
	</File>
</Tokens>