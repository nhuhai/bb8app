<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHTransactionManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHTransactionManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
            
			
			<NodeRef refid="56"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setCurrentInvoice:</TokenIdentifier>
			<Abstract type="html">The invoice used for this transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHInvoice *currentInvoice</Declaration>
			
			
			<Anchor>//api/name/currentInvoice</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/currentInvoice</TokenIdentifier>
			<Abstract type="html">The invoice used for this transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHInvoice *currentInvoice</Declaration>
			
			
			<Anchor>//api/name/currentInvoice</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/currentInvoice</TokenIdentifier>
			<Abstract type="html">The invoice used for this transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHInvoice *currentInvoice</Declaration>
			
			
			<Anchor>//api/name/currentInvoice</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setEncryptedCardData:</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is CardReader.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardSwipeData *encryptedCardData</Declaration>
			
			
			<Anchor>//api/name/encryptedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/encryptedCardData</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is CardReader.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardSwipeData *encryptedCardData</Declaration>
			
			
			<Anchor>//api/name/encryptedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/encryptedCardData</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is CardReader.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardSwipeData *encryptedCardData</Declaration>
			
			
			<Anchor>//api/name/encryptedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setManualEntryOrScannedCardData:</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is ManualEntry</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardNotPresentData *manualEntryOrScannedCardData</Declaration>
			
			
			<Anchor>//api/name/manualEntryOrScannedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/manualEntryOrScannedCardData</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is ManualEntry</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardNotPresentData *manualEntryOrScannedCardData</Declaration>
			
			
			<Anchor>//api/name/manualEntryOrScannedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/manualEntryOrScannedCardData</TokenIdentifier>
			<Abstract type="html">Card swipe data we&apos;ll use if the PaymentType is ManualEntry</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHCardNotPresentData *manualEntryOrScannedCardData</Declaration>
			
			
			<Anchor>//api/name/manualEntryOrScannedCardData</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setCheckedInClient:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocationCheckin *checkedInClient</Declaration>
			
			
			<Anchor>//api/name/checkedInClient</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/checkedInClient</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocationCheckin *checkedInClient</Declaration>
			
			
			<Anchor>//api/name/checkedInClient</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/checkedInClient</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) PPHLocationCheckin *checkedInClient</Declaration>
			
			
			<Anchor>//api/name/checkedInClient</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setIsProcessingPayment:</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re busy processing a payment we the back end.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessingPayment</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently processing a finalizePayment</Abstract></ReturnValue>
			<Anchor>//api/name/isProcessingPayment</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/isProcessingPayment</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re busy processing a payment we the back end.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessingPayment</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently processing a finalizePayment</Abstract></ReturnValue>
			<Anchor>//api/name/isProcessingPayment</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/isProcessingPayment</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re busy processing a payment we the back end.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL isProcessingPayment</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently processing a finalizePayment</Abstract></ReturnValue>
			<Anchor>//api/name/isProcessingPayment</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setHasActiveTransaction:</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re currently handling a transaction.  While handling a transaction
we can accept an invoice.  If configured to work with the hardware scanners (the
default) we will also be scanning for card swipes.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL hasActiveTransaction</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently handling a transaction.</Abstract></ReturnValue>
			<Anchor>//api/name/hasActiveTransaction</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/hasActiveTransaction</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re currently handling a transaction.  While handling a transaction
we can accept an invoice.  If configured to work with the hardware scanners (the
default) we will also be scanning for card swipes.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL hasActiveTransaction</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently handling a transaction.</Abstract></ReturnValue>
			<Anchor>//api/name/hasActiveTransaction</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/hasActiveTransaction</TokenIdentifier>
			<Abstract type="html">Discover if we&apos;re currently handling a transaction.  While handling a transaction
we can accept an invoice.  If configured to work with the hardware scanners (the
default) we will also be scanning for card swipes.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) BOOL hasActiveTransaction</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean value.  Returns true if we&apos;re currently handling a transaction.</Abstract></ReturnValue>
			<Anchor>//api/name/hasActiveTransaction</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setIgnoreHardwareReaders:</TokenIdentifier>
			<Abstract type="html">Configure the TransactionManager to ignore OR work with any payment readers that might
be attached.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreHardwareReaders</Declaration>
			
			
			<Anchor>//api/name/ignoreHardwareReaders</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/ignoreHardwareReaders</TokenIdentifier>
			<Abstract type="html">Configure the TransactionManager to ignore OR work with any payment readers that might
be attached.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreHardwareReaders</Declaration>
			
			
			<Anchor>//api/name/ignoreHardwareReaders</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/ignoreHardwareReaders</TokenIdentifier>
			<Abstract type="html">Configure the TransactionManager to ignore OR work with any payment readers that might
be attached.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL ignoreHardwareReaders</Declaration>
			
			
			<Anchor>//api/name/ignoreHardwareReaders</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/transactionRequiresSignatureForAmount:paymentMethod:</TokenIdentifier>
			<Abstract type="html">Determines if the current transaction will request a signature or not for a given amount.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)transactionRequiresSignatureForAmount:(PPHAmount *)amountOrNil paymentMethod:(PPHPaymentMethod)paymentMethod</Declaration>
			<Parameters>
				<Parameter>
					<Name>amountOrNil</Name>
					<Abstract type="html">The amount to test against, or nil if you would like to use the current invoice total.</Abstract>
				</Parameter><Parameter>
					<Name>paymentMethod</Name>
					<Abstract type="html">The payment method. If it is ePPHPaymentMethodUnknown the method of the current payment is used.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/transactionRequiresSignatureForAmount:paymentMethod:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setRequireSignatureWhenApplicable:</TokenIdentifier>
			<Abstract type="html">Determines if we can bypass signature if it is not essential to the payment environment.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requireSignatureWhenApplicable</Declaration>
			
			
			<Anchor>//api/name/requireSignatureWhenApplicable</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/requireSignatureWhenApplicable</TokenIdentifier>
			<Abstract type="html">Determines if we can bypass signature if it is not essential to the payment environment.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requireSignatureWhenApplicable</Declaration>
			
			
			<Anchor>//api/name/requireSignatureWhenApplicable</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/requireSignatureWhenApplicable</TokenIdentifier>
			<Abstract type="html">Determines if we can bypass signature if it is not essential to the payment environment.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL requireSignatureWhenApplicable</Declaration>
			
			
			<Anchor>//api/name/requireSignatureWhenApplicable</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setShouldPromptForOnReaderTips:</TokenIdentifier>
			<Abstract type="html">If set to YES when attempting to activate the reader instead we will first display a prompt for
a user to enter an amount on the reader that will be added to the invoice as a gratuity. After
the gratuity amount is collected the reader will then be activated.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldPromptForOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/shouldPromptForOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/shouldPromptForOnReaderTips</TokenIdentifier>
			<Abstract type="html">If set to YES when attempting to activate the reader instead we will first display a prompt for
a user to enter an amount on the reader that will be added to the invoice as a gratuity. After
the gratuity amount is collected the reader will then be activated.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldPromptForOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/shouldPromptForOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/shouldPromptForOnReaderTips</TokenIdentifier>
			<Abstract type="html">If set to YES when attempting to activate the reader instead we will first display a prompt for
a user to enter an amount on the reader that will be added to the invoice as a gratuity. After
the gratuity amount is collected the reader will then be activated.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL shouldPromptForOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/shouldPromptForOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setUsePercentageOnReaderTips:</TokenIdentifier>
			<Abstract type="html">If set to YES when on reader tipping is enabled the reader will prompt for and collect a
gratuity amount as percentage rather than amount. Once entered the percentage will be multiplied
with the current invoice&apos;s subtotal and applied as a gratuity amount.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL usePercentageOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/usePercentageOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/usePercentageOnReaderTips</TokenIdentifier>
			<Abstract type="html">If set to YES when on reader tipping is enabled the reader will prompt for and collect a
gratuity amount as percentage rather than amount. Once entered the percentage will be multiplied
with the current invoice&apos;s subtotal and applied as a gratuity amount.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL usePercentageOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/usePercentageOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/usePercentageOnReaderTips</TokenIdentifier>
			<Abstract type="html">If set to YES when on reader tipping is enabled the reader will prompt for and collect a
gratuity amount as percentage rather than amount. Once entered the percentage will be multiplied
with the current invoice&apos;s subtotal and applied as a gratuity amount.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL usePercentageOnReaderTips</Declaration>
			
			
			<Anchor>//api/name/usePercentageOnReaderTips</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/setReaderSleepDelay:</TokenIdentifier>
			<Abstract type="html">The amount of time in seconds we will wait before explicitly putting the reader to sleep when not
in a transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval readerSleepDelay</Declaration>
			
			
			<Anchor>//api/name/readerSleepDelay</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/readerSleepDelay</TokenIdentifier>
			<Abstract type="html">The amount of time in seconds we will wait before explicitly putting the reader to sleep when not
in a transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval readerSleepDelay</Declaration>
			
			
			<Anchor>//api/name/readerSleepDelay</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHTransactionManager/readerSleepDelay</TokenIdentifier>
			<Abstract type="html">The amount of time in seconds we will wait before explicitly putting the reader to sleep when not
in a transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSTimeInterval readerSleepDelay</Declaration>
			
			
			<Anchor>//api/name/readerSleepDelay</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginPayment</TokenIdentifier>
			<Abstract type="html">Used to begin all types of payment (check-in, card present, manual entry, cash, etc)
This call causes the hardware enabled version of the SDK to start scanning for card swipes.
the currentInvoice is initialized with an empty inventory for you to add items to.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginPayment</Declaration>
			
			
			<Anchor>//api/name/beginPayment</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginPaymentWithAmount:andName:</TokenIdentifier>
			<Abstract type="html">Begin a fixed amount payment.  Similar to beginPayment except this time the
TransactionManager&apos;s invoice object becomes primed with an invoice containing
the fixed amount item.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginPaymentWithAmount:(PPHAmount *)amount andName:(NSString *)itemName</Declaration>
			<Parameters>
				<Parameter>
					<Name>amount</Name>
					<Abstract type="html">the amount to charge the customer.</Abstract>
				</Parameter><Parameter>
					<Name>itemName</Name>
					<Abstract type="html">the name for this item.  Will be stored in the invoice.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginPaymentWithAmount:andName:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginPaymentWithInvoice:</TokenIdentifier>
			<Abstract type="html">Begin a payment use a given invoice.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginPaymentWithInvoice:(PPHInvoice *)invoice</Declaration>
			<Parameters>
				<Parameter>
					<Name>invoice</Name>
					<Abstract type="html">the invoice which is tracking the current purchase.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginPaymentWithInvoice:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/cancelPayment</TokenIdentifier>
			<Abstract type="html">Clears the current state of the transaction, including current invoice, card data, etc, thus
returning back to an Idle state.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (PPHError *)cancelPayment</Declaration>
			
			
			<Anchor>//api/name/cancelPayment</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/authorizePaymentWithPaymentType:withCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Authorize a payment.  Used with either Checkin (ePPHPaymentMethodPaypal) or a card
payment (ePPHPaymentMethodSwipe, ePPHPaymentMethodKey).   Allows you to authorize an amount.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)authorizePaymentWithPaymentType:(PPHPaymentMethod)paymentMethod withCompletionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>paymentMethod</Name>
					<Abstract type="html">What type of authorization we are doing.  Can be ePPHPaymentMethodPaypal (checkin)
or ePPHPaymentMethodSwipe or ePPHPaymentMethodKey</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Will return a PPHTransactionResponse.  If there&apos;s an error then the PPHTransactionRecord&apos;s
error object will be non nil.  Otherwise it will contain a PPHTransactionRecord which you can
later pass into voidAuthoriztion or capturePaymentForAuthorization</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/authorizePaymentWithPaymentType:withCompletionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/voidAuthorization:withCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Allows you to void a previously authorized payment.
@param authorizedTransactionRecord</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)voidAuthorization:(PPHTransactionRecord *)authorizedTransactionRecord withCompletionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">will return a PPHTransactionResponse.  If there&apos;s an error then the PPHTransactionRecord&apos;s
error object will be non nil.  Otherwise it will contain a PPHTransactionRecord for this void action.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/voidAuthorization:withCompletionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/capturePaymentForAuthorization:withCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Captures a prevoisly authorized payment.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)capturePaymentForAuthorization:(PPHTransactionRecord *)authorizedTransactionRecord withCompletionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>authorizedTransactionRecord</Name>
					<Abstract type="html">This is the PPHTransactionRecord you received in the
authorizePayment call.  This tells the SDK what auth you&apos;d like to capture.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">: Will return a PPHTransactionResponse.  If there&apos;s an error
then the PPHTransactionRecord&apos;s error object will be non nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/capturePaymentForAuthorization:withCompletionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/processPaymentWithPaymentType:withTransactionController:completionHandler:</TokenIdentifier>
			<Abstract type="html">Process a payment given a payment type of card, cash, cheque, checked-In-Client, etc.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)processPaymentWithPaymentType:(PPHPaymentMethod)paymentType withTransactionController:(id&lt;PPHTransactionControllerDelegate&gt;)controller completionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>paymentType</Name>
					<Abstract type="html">the type of payment to collect.  You&apos;ll get an error back if you
specify ePPHPaymentTypesCheckedInPayment and haven&apos;t set the
checkedInClient property.  Likewise with the cardData member and
specifying ePPHPaymentMethodSwipe.</Abstract>
				</Parameter><Parameter>
					<Name>controller</Name>
					<Abstract type="html">Can be nil.  If provided, the transaction manager will call the callbacks
defined in the PPHTransactionControllerDelegate.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">called when the action has completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/processPaymentWithPaymentType:withTransactionController:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/provideSignature:forTransaction:completionHandler:</TokenIdentifier>
			<Abstract type="html">Used to capture the signature of the customer if it already hasn&apos;t been captured in the processPayment call
and complete the transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)provideSignature:(UIImage *)signature forTransaction:(PPHTransactionRecord *)previousTransaction completionHandler:(void ( ^ ) ( PPHError *))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>signature</Name>
					<Abstract type="html">: A UIImage contining the signature of the customer.</Abstract>
				</Parameter><Parameter>
					<Name>previousTransaction</Name>
					<Abstract type="html">: The transaction record object that is returned back from the processPayment call.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">: A response handler that would be invoked by the SDK in case of a success or a failure.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/provideSignature:forTransaction:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginRefund:forAmount:completionHandler:</TokenIdentifier>
			<Abstract type="html">Issue a refund against a previously successful PayPal transaction.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginRefund:(PPHTransactionRecord *)previousTransaction forAmount:(PPHAmount *)amountOrNil completionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>previousTransaction</Name>
					<Abstract type="html">The transaction identifier for the original payment transaction.
If you want to send a receipt and you don&apos;t have a PPHTransactionRecord you can construct one.  Just make
sure it at least has the transactionId set.  Other params being set is ok, they will not be accessed
by beginRefund.</Abstract>
				</Parameter><Parameter>
					<Name>amountOrNil</Name>
					<Abstract type="html">Only pass an amount in the case of a partial refund. Otherwise, the backend will ensure it&apos;s a full refund.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">Called when the action has completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/beginRefund:forAmount:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/sendReceipt:toRecipient:completionHandler:</TokenIdentifier>
			<Abstract type="html">Used to send the receipt of a transaction to a customer based on the email address or the phone number provided.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)sendReceipt:(PPHTransactionRecord *)previousTransaction toRecipient:(PPHReceiptDestination *)destination completionHandler:(PPHInvoiceBasicCompletionHandler)completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>previousTransaction</Name>
					<Abstract type="html">: The transaction record object that is returned back from the processPayment call. This will
contain the invoice id and transaction id etc needed to send the receipt.

If you want to send a receipt and you don&apos;t have a PPHTransactionRecord you can construct one.  Just make
sure it has BOTH the transactionId and payPalInvoiceId properties set.</Abstract>
				</Parameter><Parameter>
					<Name>destination</Name>
					<Abstract type="html">: A PPHReceiptDestination object which describes either the email address or phone number to
which we should send the receipt.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">: A response handler that would be invoked by the SDK in case of a success or a failure.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sendReceipt:toRecipient:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/activateReaderForPayments:</TokenIdentifier>
			<Abstract type="html">* This api is used to activate the EMV reader to start listening/processing for payments.
* @param error : If an error occurs, upon return contains a PPHError object that describes the problem.
                  Pass in NULL if you do not want error reporting.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)activateReaderForPayments:(PPHError **)error</Declaration>
			
			
			<Anchor>//api/name/activateReaderForPayments:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/deActivateReaderForPayments</TokenIdentifier>
			<Abstract type="html">This api is used to stop the EMV reader from looking for payments.</Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)deActivateReaderForPayments</Declaration>
			
			
			<Anchor>//api/name/deActivateReaderForPayments</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginPaymentUsingUIWithInvoice:transactionController:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginPaymentUsingUIWithInvoice:(PPHInvoice *)invoice transactionController:(id&lt;PPHTransactionControllerDelegate&gt;)controller</Declaration>
			
			
			<Anchor>//api/name/beginPaymentUsingUIWithInvoice:transactionController:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/processPaymentUsingUIWithPaymentType:completionHandler:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)processPaymentUsingUIWithPaymentType:(PPHPaymentMethod)paymentType completionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			
			
			<Anchor>//api/name/processPaymentUsingUIWithPaymentType:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/beginRefundUsingUIWithInvoice:transactionController:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)beginRefundUsingUIWithInvoice:(PPHInvoice *)invoice transactionController:(id&lt;PPHTransactionControllerDelegate&gt;)controller</Declaration>
			
			
			<Anchor>//api/name/beginRefundUsingUIWithInvoice:transactionController:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/processRefundUsingUIWithAmount:completionHandler:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)processRefundUsingUIWithAmount:(PPHAmount *)amount completionHandler:(PPHTransactionCompletionHandler)completionHandler</Declaration>
			
			
			<Anchor>//api/name/processRefundUsingUIWithAmount:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHTransactionManager/sendReceiptUsingUIWithTransactionRecord:amount:transactionController:destination:completionHandler:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>PPHTransactionManager.h</DeclaredIn>
			
			<Declaration>- (void)sendReceiptUsingUIWithTransactionRecord:(PPHTransactionRecord *)record amount:(PPHAmount *)transactionAmount transactionController:(id&lt;PPHTransactionControllerDelegate&gt;)transactionController destination:(PPHReceiptDestination *)destination completionHandler:(PPHReceiptCompletionHandler)completionHandler</Declaration>
			
			
			<Anchor>//api/name/sendReceiptUsingUIWithTransactionRecord:amount:transactionController:destination:completionHandler:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
        
        
	</File>
</Tokens>