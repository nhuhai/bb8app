<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPHInvoiceItem.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPHInvoiceItem</TokenIdentifier>
			<Abstract type="html">A line item on an invoice. Can be positive, negative, or zero total/unit price.
See https://cms.paypal.com/cmscontent/US/enUS/files/developer/PP_InvoicingAPIGuide.pdf
for details on field length restrictions and formats.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
            
			
			<NodeRef refid="32"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setItemId:</TokenIdentifier>
			<Abstract type="html">An itemId for YOUR reference - this is not currently stored with the invoice on the server side. This id must
be unique amongst all the items on an invoice so that the quantity increment/decrement operators can
work.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemId</Declaration>
			
			
			<Anchor>//api/name/itemId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/itemId</TokenIdentifier>
			<Abstract type="html">An itemId for YOUR reference - this is not currently stored with the invoice on the server side. This id must
be unique amongst all the items on an invoice so that the quantity increment/decrement operators can
work.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemId</Declaration>
			
			
			<Anchor>//api/name/itemId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/itemId</TokenIdentifier>
			<Abstract type="html">An itemId for YOUR reference - this is not currently stored with the invoice on the server side. This id must
be unique amongst all the items on an invoice so that the quantity increment/decrement operators can
work.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemId</Declaration>
			
			
			<Anchor>//api/name/itemId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setItemDetailId:</TokenIdentifier>
			<Abstract type="html">An item &quot;variation id&quot; for YOUR reference - this is also not currently stored with the invoice server side.
If set, the increment/decrement operators will match on it as well. We&apos;ve kept it separate from itemId
so that when we DO store itemId server side (soon), you won&apos;t have to rework a bunch of code.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemDetailId</Declaration>
			
			
			<Anchor>//api/name/itemDetailId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/itemDetailId</TokenIdentifier>
			<Abstract type="html">An item &quot;variation id&quot; for YOUR reference - this is also not currently stored with the invoice server side.
If set, the increment/decrement operators will match on it as well. We&apos;ve kept it separate from itemId
so that when we DO store itemId server side (soon), you won&apos;t have to rework a bunch of code.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemDetailId</Declaration>
			
			
			<Anchor>//api/name/itemDetailId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/itemDetailId</TokenIdentifier>
			<Abstract type="html">An item &quot;variation id&quot; for YOUR reference - this is also not currently stored with the invoice server side.
If set, the increment/decrement operators will match on it as well. We&apos;ve kept it separate from itemId
so that when we DO store itemId server side (soon), you won&apos;t have to rework a bunch of code.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *itemDetailId</Declaration>
			
			
			<Anchor>//api/name/itemDetailId</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setQuantity:</TokenIdentifier>
			<Abstract type="html">The quantity of this item purchased, which can be fractional</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *quantity</Declaration>
			
			
			<Anchor>//api/name/quantity</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/quantity</TokenIdentifier>
			<Abstract type="html">The quantity of this item purchased, which can be fractional</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *quantity</Declaration>
			
			
			<Anchor>//api/name/quantity</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/quantity</TokenIdentifier>
			<Abstract type="html">The quantity of this item purchased, which can be fractional</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *quantity</Declaration>
			
			
			<Anchor>//api/name/quantity</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setName:</TokenIdentifier>
			<Abstract type="html">The name of this item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/name</TokenIdentifier>
			<Abstract type="html">The name of this item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/name</TokenIdentifier>
			<Abstract type="html">The name of this item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *name</Declaration>
			
			
			<Anchor>//api/name/name</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setItemDescription:</TokenIdentifier>
			<Abstract type="html">A longer description for the item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *itemDescription</Declaration>
			
			
			<Anchor>//api/name/itemDescription</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/itemDescription</TokenIdentifier>
			<Abstract type="html">A longer description for the item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *itemDescription</Declaration>
			
			
			<Anchor>//api/name/itemDescription</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/itemDescription</TokenIdentifier>
			<Abstract type="html">A longer description for the item</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *itemDescription</Declaration>
			
			
			<Anchor>//api/name/itemDescription</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setUnitPrice:</TokenIdentifier>
			<Abstract type="html">Price per unit - can be negative or zero (and of course positive)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *unitPrice</Declaration>
			
			
			<Anchor>//api/name/unitPrice</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/unitPrice</TokenIdentifier>
			<Abstract type="html">Price per unit - can be negative or zero (and of course positive)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *unitPrice</Declaration>
			
			
			<Anchor>//api/name/unitPrice</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/unitPrice</TokenIdentifier>
			<Abstract type="html">Price per unit - can be negative or zero (and of course positive)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *unitPrice</Declaration>
			
			
			<Anchor>//api/name/unitPrice</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setTaxRate:</TokenIdentifier>
			<Abstract type="html">The tax rate for this item. Note that at the moment tax rules are not flexible on
the PayPal backend so our rounding and computation rules are also not flexibile.
One alternative is to use a line item for tax. As an example, a 6% tax rate should
be .06 for this property.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *taxRate</Declaration>
			
			
			<Anchor>//api/name/taxRate</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/taxRate</TokenIdentifier>
			<Abstract type="html">The tax rate for this item. Note that at the moment tax rules are not flexible on
the PayPal backend so our rounding and computation rules are also not flexibile.
One alternative is to use a line item for tax. As an example, a 6% tax rate should
be .06 for this property.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *taxRate</Declaration>
			
			
			<Anchor>//api/name/taxRate</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/taxRate</TokenIdentifier>
			<Abstract type="html">The tax rate for this item. Note that at the moment tax rules are not flexible on
the PayPal backend so our rounding and computation rules are also not flexibile.
One alternative is to use a line item for tax. As an example, a 6% tax rate should
be .06 for this property.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSDecimalNumber *taxRate</Declaration>
			
			
			<Anchor>//api/name/taxRate</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setTaxRateName:</TokenIdentifier>
			<Abstract type="html">The name of the tax rate for this item - limited to 10 characters (yikes)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *taxRateName</Declaration>
			
			
			<Anchor>//api/name/taxRateName</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/taxRateName</TokenIdentifier>
			<Abstract type="html">The name of the tax rate for this item - limited to 10 characters (yikes)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *taxRateName</Declaration>
			
			
			<Anchor>//api/name/taxRateName</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/taxRateName</TokenIdentifier>
			<Abstract type="html">The name of the tax rate for this item - limited to 10 characters (yikes)</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic, readonly) NSString *taxRateName</Declaration>
			
			
			<Anchor>//api/name/taxRateName</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/setImageUrl:</TokenIdentifier>
			<Abstract type="html">The image associated with this item, if any. Must be SSL.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *imageUrl</Declaration>
			
			
			<Anchor>//api/name/imageUrl</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/imageUrl</TokenIdentifier>
			<Abstract type="html">The image associated with this item, if any. Must be SSL.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *imageUrl</Declaration>
			
			
			<Anchor>//api/name/imageUrl</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPHInvoiceItem/imageUrl</TokenIdentifier>
			<Abstract type="html">The image associated with this item, if any. Must be SSL.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>@property (strong, nonatomic) NSString *imageUrl</Declaration>
			
			
			<Anchor>//api/name/imageUrl</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/init</TokenIdentifier>
			<Abstract type="html">Do NOT call the default initializer. You will be greeted with an NSInternalInconsistencyException.</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/asDictionary</TokenIdentifier>
			<Abstract type="html">Return the item as a dictionary suitable for the invoice API</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)asDictionary</Declaration>
			
			
			<Anchor>//api/name/asDictionary</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Create the item from a dictionary from the invoice API</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>- (id)initWithDictionary:(NSDictionary *)representation</Declaration>
			<Parameters>
				<Parameter>
					<Name>representation</Name>
					<Abstract type="html">The dictionary from the server</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithDictionary:</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPHInvoiceItem/roundedTotalInCurrency:</TokenIdentifier>
			<Abstract type="html">Calculate the rounded total based on the quantity and unitPrice</Abstract>
			<DeclaredIn>PPHInvoiceItem.h</DeclaredIn>
			
			<Declaration>- (PPHAmount *)roundedTotalInCurrency:(NSString *)currency</Declaration>
			
			
			<Anchor>//api/name/roundedTotalInCurrency:</Anchor>
            <NodeRef refid="32"/>
		</Token>
		
        
        
	</File>
</Tokens>